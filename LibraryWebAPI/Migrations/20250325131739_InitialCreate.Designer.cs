// <auto-generated />
using System;
using LibraryWebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryWebAPI.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20250325131739_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryWebAPI.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("BookID");

                    b.Property<int>("BookAuthorId")
                        .HasColumnType("int")
                        .HasColumnName("BookAuthorID");

                    b.Property<int>("BookGenreId")
                        .HasColumnType("int")
                        .HasColumnName("BookGenreID");

                    b.Property<int>("BookNavigationItemId")
                        .HasColumnType("int");

                    b.Property<string>("Isbn")
                        .HasMaxLength(13)
                        .IsUnicode(false)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("ISBN");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int")
                        .HasColumnName("PublisherID");

                    b.Property<int>("YearPublished")
                        .HasColumnType("int");

                    b.HasKey("BookId")
                        .HasName("PK__Book__3DE0C227DE49FC03");

                    b.HasIndex("BookAuthorId");

                    b.HasIndex("BookGenreId");

                    b.HasIndex("BookNavigationItemId");

                    b.HasIndex("PublisherId");

                    b.HasIndex(new[] { "Isbn" }, "UQ__Book__447D36EA19E8B3BA")
                        .IsUnique()
                        .HasFilter("[ISBN] IS NOT NULL");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("LibraryWebAPI.Models.BookAuthor", b =>
                {
                    b.Property<int>("BookAuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookAuthorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookAuthorId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("BookAuthorId")
                        .HasName("PK__BookAuth__21B24F39E3390529");

                    b.ToTable("BookAuthor", (string)null);
                });

            modelBuilder.Entity("LibraryWebAPI.Models.BookGenre", b =>
                {
                    b.Property<int>("BookGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookGenreID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookGenreId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("BookGenreId")
                        .HasName("PK__BookGenr__57C9DE4E505A3132");

                    b.ToTable("BookGenre", (string)null);
                });

            modelBuilder.Entity("LibraryWebAPI.Models.BorrowerType", b =>
                {
                    b.Property<int>("BorrowerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BorrowerTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BorrowerTypeId"));

                    b.Property<int>("BorrowingLimit")
                        .HasColumnType("int");

                    b.Property<int>("LoanPeriod")
                        .HasColumnType("int");

                    b.Property<int>("ReservationWindow")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("BorrowerTypeId")
                        .HasName("PK__Borrower__F925F31B052755B6");

                    b.HasIndex(new[] { "Type" }, "UQ__Borrower__F9B8A48BC18316AD")
                        .IsUnique();

                    b.ToTable("BorrowerType", (string)null);
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("AccountPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("BorrowerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("BorrowerTypeID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("EmailConfirmationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateOnly?>("MembershipEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("MembershipStartDate")
                        .HasColumnType("date");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__A4AE64B8D9801C7B");

                    b.HasIndex("BorrowerTypeId");

                    b.HasIndex(new[] { "Email" }, "UQ__Customer__A9D10534D8059F9B")
                        .IsUnique();

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Donation", b =>
                {
                    b.Property<int>("DonationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DonationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DonationId"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.HasKey("DonationId")
                        .HasName("PK__Donation__C5082EDB4EA6F46D");

                    b.HasIndex("CustomerId");

                    b.ToTable("Donation", (string)null);
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("AccountPassword")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<int?>("SupervisorId")
                        .HasColumnType("int")
                        .HasColumnName("SupervisorID");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("EmployeeId")
                        .HasName("PK__Employee__7AD04FF12260513D");

                    b.HasIndex("Sex");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EventID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<int>("AgeGroup")
                        .HasMaxLength(3)
                        .HasColumnType("int")
                        .IsFixedLength();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("EndTimestamp")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("StartTimestamp")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("EventId")
                        .HasName("PK__Event__7944C8702945AA9C");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("LibraryWebAPI.Models.EventCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("CategoryId")
                        .HasName("PK__EventCat__19093A2B43E84FD7");

                    b.ToTable("EventCategory", (string)null);
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Fine", b =>
                {
                    b.Property<int>("FineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FineID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FineId"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("IssueDate")
                        .HasColumnType("date");

                    b.Property<bool>("PaymentStatus")
                        .HasColumnType("bit");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    b.HasKey("FineId")
                        .HasName("PK__Fines__9D4A9BCC3A3AFBE6");

                    b.HasIndex("CustomerId");

                    b.ToTable("Fines");
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<string>("AvailabilityStatus")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TotalCopies")
                        .HasColumnType("int");

                    b.HasKey("ItemId")
                        .HasName("PK__Item__727E83EBD4885DED");

                    b.ToTable("Item", (string)null);
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("MovieID");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Format")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("MovieGenreId")
                        .HasColumnType("int")
                        .HasColumnName("MovieGenreID");

                    b.Property<int>("MovieNavigationItemId")
                        .HasColumnType("int");

                    b.Property<int?>("YearReleased")
                        .HasColumnType("int");

                    b.HasKey("MovieId")
                        .HasName("PK__Movie__4BD2943AC50379E7");

                    b.HasIndex("MovieGenreId");

                    b.HasIndex("MovieNavigationItemId");

                    b.ToTable("Movie", (string)null);
                });

            modelBuilder.Entity("LibraryWebAPI.Models.MovieGenre", b =>
                {
                    b.Property<int>("MovieGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MovieGenreID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieGenreId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("MovieGenreId")
                        .HasName("PK__MovieGen__C18CDB60BBCD3355");

                    b.ToTable("MovieGenre", (string)null);
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Music", b =>
                {
                    b.Property<int>("MusicId")
                        .HasColumnType("int")
                        .HasColumnName("MusicID");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("MusicGenreId")
                        .HasColumnType("int")
                        .HasColumnName("MusicGenreID");

                    b.Property<int>("MusicNavigationItemId")
                        .HasColumnType("int");

                    b.HasKey("MusicId")
                        .HasName("PK__Music__11F840E0555B1385");

                    b.HasIndex("MusicGenreId");

                    b.HasIndex("MusicNavigationItemId");

                    b.ToTable("Music", (string)null);
                });

            modelBuilder.Entity("LibraryWebAPI.Models.MusicGenre", b =>
                {
                    b.Property<int>("MusicGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MusicGenreID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MusicGenreId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("MusicGenreId")
                        .HasName("PK__MusicGen__4561E110378D2E03");

                    b.ToTable("MusicGenre", (string)null);
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PublisherID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherId"));

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PublisherId")
                        .HasName("PK__Publishe__4C657E4BFDBEB389");

                    b.HasIndex(new[] { "PublisherName" }, "UQ__Publishe__5F0E22494099DCC5")
                        .IsUnique();

                    b.ToTable("Publisher", (string)null);
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Sex", b =>
                {
                    b.Property<int>("SexID")
                        .HasColumnType("int")
                        .HasColumnName("Sex");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("SexID")
                        .HasName("PK__Sex__CA1E3C81ACCDEC3C");

                    b.HasIndex(new[] { "Description" }, "UQ__Sex__4EBBBAC9A43B1219")
                        .IsUnique();

                    b.ToTable("Sex", (string)null);
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Technology", b =>
                {
                    b.Property<int>("DeviceId")
                        .HasColumnType("int")
                        .HasColumnName("DeviceID");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ModelNumber")
                        .HasColumnType("int")
                        .HasColumnName("ModelNumber");

                    b.HasKey("DeviceId")
                        .HasName("PK__Technolo__49E12331C93D0AED");

                    b.HasIndex(new[] { "ModelNumber" }, "UQ__Technolo__6422901FB0A5F203")
                        .IsUnique();

                    b.ToTable("Technology", (string)null);
                });

            modelBuilder.Entity("LibraryWebAPI.Models.TransactionHistory", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateOnly>("DateBorrowed")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<DateOnly?>("ReturnDate")
                        .HasColumnType("date");

                    b.HasKey("TransactionId")
                        .HasName("PK__TRANSACT__55433A4B8D7C7CAF");

                    b.HasIndex("CustomerId");

                    b.ToTable("TRANSACTION_HISTORY", (string)null);
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Waitlist", b =>
                {
                    b.Property<int>("WaitlistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WaitlistID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WaitlistId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isReceived")
                        .HasColumnType("bit");

                    b.HasKey("WaitlistId")
                        .HasName("PK__Waitlist__FE78FE80F40A43D3");

                    b.HasIndex("CustomerId");

                    b.ToTable("Waitlist", (string)null);
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Book", b =>
                {
                    b.HasOne("LibraryWebAPI.Models.BookAuthor", "BookAuthor")
                        .WithMany("Books")
                        .HasForeignKey("BookAuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_Book_BookAuthor");

                    b.HasOne("LibraryWebAPI.Models.BookGenre", "BookGenre")
                        .WithMany("Books")
                        .HasForeignKey("BookGenreId")
                        .IsRequired()
                        .HasConstraintName("FK_Book_BookGenre");

                    b.HasOne("LibraryWebAPI.Models.Item", "BookNavigation")
                        .WithMany()
                        .HasForeignKey("BookNavigationItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryWebAPI.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .IsRequired()
                        .HasConstraintName("FK_Book_Publisher");

                    b.Navigation("BookAuthor");

                    b.Navigation("BookGenre");

                    b.Navigation("BookNavigation");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Customer", b =>
                {
                    b.HasOne("LibraryWebAPI.Models.BorrowerType", "BorrowerType")
                        .WithMany("Customers")
                        .HasForeignKey("BorrowerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BorrowerType");
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Donation", b =>
                {
                    b.HasOne("LibraryWebAPI.Models.Customer", "Customer")
                        .WithMany("Donations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Employee", b =>
                {
                    b.HasOne("LibraryWebAPI.Models.Sex", "SexNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("Sex")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_Sex");

                    b.HasOne("LibraryWebAPI.Models.Employee", "Supervisor")
                        .WithMany("InverseSupervisor")
                        .HasForeignKey("SupervisorId")
                        .HasConstraintName("FK_Employee_Supervisor");

                    b.Navigation("SexNavigation");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Fine", b =>
                {
                    b.HasOne("LibraryWebAPI.Models.Customer", null)
                        .WithMany("Fines")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Movie", b =>
                {
                    b.HasOne("LibraryWebAPI.Models.MovieGenre", "MovieGenre")
                        .WithMany("Movies")
                        .HasForeignKey("MovieGenreId")
                        .IsRequired()
                        .HasConstraintName("FK_Movie_MovieGenre");

                    b.HasOne("LibraryWebAPI.Models.Item", "MovieNavigation")
                        .WithMany()
                        .HasForeignKey("MovieNavigationItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovieGenre");

                    b.Navigation("MovieNavigation");
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Music", b =>
                {
                    b.HasOne("LibraryWebAPI.Models.MusicGenre", "MusicGenre")
                        .WithMany("Musics")
                        .HasForeignKey("MusicGenreId")
                        .IsRequired()
                        .HasConstraintName("FK_Music_MusicGenre");

                    b.HasOne("LibraryWebAPI.Models.Item", "MusicNavigation")
                        .WithMany()
                        .HasForeignKey("MusicNavigationItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MusicGenre");

                    b.Navigation("MusicNavigation");
                });

            modelBuilder.Entity("LibraryWebAPI.Models.TransactionHistory", b =>
                {
                    b.HasOne("LibraryWebAPI.Models.Customer", null)
                        .WithMany("TransactionHistories")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Waitlist", b =>
                {
                    b.HasOne("LibraryWebAPI.Models.Customer", null)
                        .WithMany("Waitlists")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryWebAPI.Models.BookAuthor", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryWebAPI.Models.BookGenre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryWebAPI.Models.BorrowerType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Customer", b =>
                {
                    b.Navigation("Donations");

                    b.Navigation("Fines");

                    b.Navigation("TransactionHistories");

                    b.Navigation("Waitlists");
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Employee", b =>
                {
                    b.Navigation("InverseSupervisor");
                });

            modelBuilder.Entity("LibraryWebAPI.Models.MovieGenre", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("LibraryWebAPI.Models.MusicGenre", b =>
                {
                    b.Navigation("Musics");
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Sex", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
